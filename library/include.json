{"functions":[{"args":[{"doc":["The [arguments model](includeModel.html#var.vName='ArgsArguments')"],"name":"arguments"}],"doc":["Output the [arguments model's](includeModel.html#var.vName='ArgsArguments') help"],"group":"args.mds","name":"argsHelp"},{"args":[{"doc":["The [arguments model](includeModel.html#var.vName='ArgsArguments')"],"name":"arguments"},{"doc":["The link text"],"name":"text"},{"doc":["Optional (default is null). The arguments object."],"name":"args"},{"doc":["Optional (default is false). If true, arguments are only included in the URL if they are in the arguments object."],"name":"explicit"},{"doc":["Optional (default is null). If non-null, the URL's header text.","The special \"_top\" header ID scrolls to the top of the page."],"name":"headerText"},{"doc":["Optional (default is null). If non-null, the MarkdownUp URL hash parameter."],"name":"url"}],"doc":["Create a Markdown link text to a MarkdownUp application URL"],"group":"args.mds","name":"argsLink","return":["The Markdown link text"]},{"args":[{"doc":["The [arguments model](includeModel.html#var.vName='ArgsArguments')"],"name":"arguments"}],"doc":["Parse an [arguments model](includeModel.html#var.vName='ArgsArguments').","Argument globals are validated and added to the arguments object using the argument name."],"group":"args.mds","name":"argsParse","return":["The arguments object"]},{"args":[{"doc":["The [arguments model](includeModel.html#var.vName='ArgsArguments')"],"name":"arguments"},{"doc":["Optional (default is null). The arguments object. Null argument values are excluded from the URL."],"name":"args"},{"doc":["Optional (default is false). If true, arguments are only included in the URL if they are in the arguments object."],"name":"explicit"},{"doc":["Optional (default is null). If non-null, the URL's header text.","The special \"_top\" header ID scrolls to the top of the page."],"name":"headerText"},{"doc":["Optional (default is null). If non-null, the MarkdownUp URL hash parameter."],"name":"url"}],"doc":["Create a MarkdownUp application URL"],"group":"args.mds","name":"argsURL","return":["The MarkdownUp application URL"]},{"args":[{"doc":["The [arguments model](includeModel.html#var.vName='ArgsArguments')"],"name":"arguments"}],"doc":["Validate an arguments model"],"group":"args.mds","name":"argsValidate","return":["The validated [arguments model](includeModel.html#var.vName='ArgsArguments') or null if validation fails"]},{"args":[{"doc":["The \"left\" string or array of strings"],"name":"left"},{"doc":["The \"right\" string or array of strings"],"name":"right"}],"doc":["Compute the line-differences of two strings or arrays of strings"],"group":"diff.bare","name":"diffLines","return":["The array of [difference models](includeModel.html#var.vName='Differences')"]},{"args":[{"doc":["The link button's text"],"name":"text"},{"doc":["The link button's click event handler"],"name":"onClick"}],"doc":["Create a link button [element model](https://github.com/craigahobbs/element-model#readme)"],"group":"forms.mds","name":"formsLinkButtonElements","return":["The link button [element model](https://github.com/craigahobbs/element-model#readme)"]},{"args":[{"doc":["The link's text"],"name":"text"},{"doc":["The link's URL. If null, the link is rendered as text."],"name":"url"}],"doc":["Create a link [element model](https://github.com/craigahobbs/element-model#readme)"],"group":"forms.mds","name":"formsLinkElements","return":["The link [element model](https://github.com/craigahobbs/element-model#readme)"]},{"args":[{"doc":["The text input element ID"],"name":"id"},{"doc":["The initial text of the text input element"],"name":"text"},{"doc":["Optional (default is null). The size, in characters, of the text input element"],"name":"size"},{"doc":["Optional (default is null). The text input element on-enter event handler"],"name":"onEnter"}],"doc":["Create a text input [element model](https://github.com/craigahobbs/element-model#readme)"],"group":"forms.mds","name":"formsTextElements","return":["The text input [element model](https://github.com/craigahobbs/element-model#readme)"]},{"args":[{"doc":["The [pager model](includeModel.html#var.vName='Pager')"],"name":"pagerModel"},{"doc":["The pager application options. The following options are available:","- **arguments** - The [arguments model](includeModel.html#var.vName='ArgsArguments').","  Must contain a string argument named \"page\".","- **hideMenu** - Hide the menu links","- **hideNav** - Hide the navigation links","- **start** - The start page name"],"name":"options"}],"doc":["The pager application main entry point"],"group":"pager.mds","name":"pagerMain"},{"args":[{"doc":["The [pager model](includeModel.html#var.vName='Pager')"],"name":"pagerModel"}],"doc":["Validate a pager model"],"group":"pager.mds","name":"pagerValidate","return":["The validated [pager model](includeModel.html#var.vName='Pager') or null if validation fails"]},{"args":[{"doc":["The actual value"],"name":"actual"},{"doc":["The expected value"],"name":"expected"},{"doc":["The description of the assertion"],"name":"description"}],"doc":["Assert an actual value is *deeply* equal to the expected value"],"group":"unittest.mds","name":"unittestDeepEqual"},{"args":[{"doc":["The actual value"],"name":"actual"},{"doc":["The expected value"],"name":"expected"},{"doc":["The description of the assertion"],"name":"description"}],"doc":["Assert an actual value is equal to the expected value"],"group":"unittest.mds","name":"unittestEqual"},{"args":[{"doc":["Optional (default is null). The map of function name to mock function data.","The following functions make use of mock data:","- **documentInputValue** - map of id to return value","- **markdownParse** - array of return values","- **markdownTitle** - array of return values","- **systemFetch** - map of URL to response text"],"name":"data"}],"doc":["Start mocking all BareScript and MarkdownUp library functions with externalities.","To stop mocking, call the [unittestMockEnd](#var.vGroup='unittestMock.mds'&unittestmockend) function."],"group":"unittestMock.mds","name":"unittestMockAll"},{"doc":["Stop all function mocks"],"group":"unittestMock.mds","name":"unittestMockEnd","return":["The array of mock function call tuples of the form (function name, function argument array)"]},{"args":[{"doc":["The name of the function to mock"],"name":"funcName"},{"doc":["The mock function"],"name":"mockFunc"}],"doc":["Start a function mock.","To stop mocking, call the [unittestMockEnd](#var.vGroup='unittestMock.mds'&unittestmockend) function."],"group":"unittestMock.mds","name":"unittestMockOne"},{"args":[{"doc":["The name of the function to mock"],"name":"funcName"}],"doc":["Start a generic function mock.","To stop mocking, call the [unittestMockEnd](#var.vGroup='unittestMock.mds'&unittestmockend) function."],"group":"unittestMock.mds","name":"unittestMockOneGeneric"},{"doc":["Render the unit test report"],"group":"unittest.mds","name":"unittestReport","return":["The number of unit test failures"]},{"args":[{"doc":["The test function name"],"name":"testName"}],"doc":["Run a unit test"],"group":"unittest.mds","name":"unittestRunTest"},{"args":[{"doc":["The test function name"],"name":"testName"}],"doc":["Run an asyncronous unit test"],"group":"unittest.mds","name":"unittestRunTestAsync"}]}