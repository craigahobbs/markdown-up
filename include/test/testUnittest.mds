# Licensed under the MIT License
# https://github.com/craigahobbs/markdown-up/blob/main/LICENSE

include '../unittest.mds'


# Helper to begin mocking the unittest global state
function testUnittestMockBegin():
    result = arrayNew(unittestTests, unittestWarnings, unittestTestName, vTest)
    systemGlobalSet('unittestTests', objectNew())
    systemGlobalSet('unittestWarnings', arrayNew())
    systemGlobalSet('unittestTestName', null)
    systemGlobalSet('vTest', null)
    return result
endfunction


# Helper to end mocking the unittest global state
function testUnittestMockEnd(beginResult):
    result = arrayNew(unittestTests, unittestWarnings)
    systemGlobalSet('unittestTests', arrayGet(beginResult, 0))
    systemGlobalSet('unittestWarnings', arrayGet(beginResult, 1))
    systemGlobalSet('unittestTestName', arrayGet(beginResult, 2))
    systemGlobalSet('vTest', arrayGet(beginResult, 3))
    return result
endfunction


# Helper unittest functions
function testUnittest_testPass():
    unittestEqual(1 + 1, 2)
    unittestDeepEqual(arrayPush(arrayNew(1), 2), arrayNew(1, 2))
endfunction

function testUnittest_testFail():
    unittestEqual(1 + 1, 3)
    unittestDeepEqual(arrayPush(arrayNew(1), 2), arrayNew(1, 2, 3))
    newline = stringFromCharCode(10)
    unittestDeepEqual('1' + newline + '2' + newline + '3', '1' + newline + '2')
endfunction

async function testUnittest_testPassAsync():
    testUnittest_testPass()
endfunction

async function testUnittest_testFailAsync():
    testUnittest_testFail()
endfunction


async function testUnittestSentinel():
    unittestEqual(systemGlobalGet('unittestSentinel'), true)
    systemGlobalSet('unittestSentinel', 1)
    include '../unittest.mds'
    unittestEqual(systemGlobalGet('unittestSentinel'), 1)
endfunction
unittestRunTestAsync('testUnittestSentinel')


function testUnittestRunTest():
    # Setup mocks
    unittestMockAll()

    # Run unit tests and report
    mockBegin = testUnittestMockBegin()
    unittestRunTest('testUnittest_testPass')
    result = unittestReport()
    testUnittestMockEnd(mockBegin)

    # Verify report result
    unittestEqual(result, 0)

    # Reset mocks
    unittestDeepEqual(unittestMockEnd(), arrayNew( \
        arrayNew('markdownPrint', arrayNew( \
            '', \
            'Ran 1 tests - 1 passed, 0 failed' \
        )), \
        arrayNew('markdownPrint', arrayNew( \
            '', \
            '## Passing Tests' \
        )), \
        arrayNew('markdownPrint', arrayNew( \
            '', \
            "[testUnittest\\_testPass](#var.vTest='testUnittest_testPass') - OK" \
        )) \
    ))
endfunction
unittestRunTest('testUnittestRunTest')


function testUnittestRunTest_failure():
    # Setup mocks
    unittestMockAll()

    # Run unit tests and report
    mockBegin = testUnittestMockBegin()
    unittestRunTest('testUnittest_testPass')
    unittestRunTest('testUnittest_testFail')
    result = unittestReport()
    testUnittestMockEnd(mockBegin)

    # Verify report result
    unittestEqual(result, 1)

    # Reset mocks
    unittestDeepEqual(unittestMockEnd(), arrayNew( \
        arrayNew('markdownPrint', arrayNew( \
            '', \
            'Ran 2 tests - 1 passed, 1 failed' \
        )), \
        arrayNew('markdownPrint', arrayNew( \
            '', \
            '## Failing Tests' \
        )), \
        arrayNew('markdownPrint', arrayNew( \
            arrayNew( \
                '', \
                "[testUnittest\\_testFail](#var.vTest='testUnittest_testFail') - FAIL", \
                '', \
                '- Equal:', \
                '', \
                '  ```', \
                '  2', \
                '  ```', \
                '', \
                '  ```', \
                '  3', \
                '  ```', \
                '', \
                '- Deep-equal:', \
                '', \
                '  ```', \
                '  ---     2', \
                '  +++     2,', \
                '  +++     3', \
                '  ```', \
                '', \
                '- Deep-equal:', \
                '', \
                '  ```', \
                '  --- 3', \
                '  ```' \
            ) \
        )), \
        arrayNew('markdownPrint', arrayNew( \
            '', \
            '## Passing Tests' \
        )), \
        arrayNew('markdownPrint', arrayNew( \
            '', \
            "[testUnittest\\_testPass](#var.vTest='testUnittest_testPass') - OK" \
        )) \
      ))
endfunction
unittestRunTest('testUnittestRunTest_failure')


function testUnittestRunTest_multiple():
    # Setup mocks
    unittestMockAll()

    # Run unit tests and report
    mockBegin = testUnittestMockBegin()
    unittestRunTest('testUnittest_testPass')
    unittestRunTest('testUnittest_testPass')
    result = unittestReport()
    testUnittestMockEnd(mockBegin)

    # Verify report result
    unittestEqual(result, 1)

    # Reset mocks
    unittestDeepEqual(unittestMockEnd(), arrayNew( \
        arrayNew('markdownPrint', arrayNew( \
            '', \
            'Ran 1 tests - 1 passed, 0 failed' \
        )), \
        arrayNew('markdownPrint', arrayNew( \
            '', \
            '## Warnings' \
        )), \
        arrayNew('markdownPrint', arrayNew( \
            '', \
            '- Test \\"testUnittest\\_testPass\\" run multiple times' \
        )), \
        arrayNew('markdownPrint', arrayNew( \
            '', \
            '## Passing Tests' \
        )), \
        arrayNew('markdownPrint', arrayNew( \
            '', \
            "[testUnittest\\_testPass](#var.vTest='testUnittest_testPass') - OK" \
        )) \
    ))
endfunction
unittestRunTest('testUnittestRunTest_multiple')


function testUnittestRunTest_unknown():
    # Setup mocks
    unittestMockAll()

    # Run unit tests and report
    mockBegin = testUnittestMockBegin()
    unittestRunTest('testUnittest_testUnknown')
    result = unittestReport()
    testUnittestMockEnd(mockBegin)

    # Verify report result
    unittestEqual(result, 1)

    # Reset mocks
    unittestDeepEqual(unittestMockEnd(), arrayNew( \
        arrayNew('markdownPrint', arrayNew( \
            '', \
            'Ran 0 tests - 0 passed, 0 failed' \
        )), \
        arrayNew('markdownPrint', arrayNew( \
            '', \
            '## Warnings' \
        )), \
        arrayNew('markdownPrint', arrayNew( \
            '', \
            '- Test \\"testUnittest\\_testUnknown\\" not found' \
        )) \
    ))
endfunction
unittestRunTest('testUnittestRunTest_unknown')


async function testUnittestRunTestAsync():
    # Setup mocks
    unittestMockAll()

    # Run unit tests and report
    mockBegin = testUnittestMockBegin()
    unittestRunTestAsync('testUnittest_testPassAsync')
    result = unittestReport()
    testUnittestMockEnd(mockBegin)

    # Verify report result
    unittestEqual(result, 0)

    # Reset mocks
    unittestDeepEqual(unittestMockEnd(), arrayNew( \
        arrayNew('markdownPrint', arrayNew( \
            '', \
            'Ran 1 tests - 1 passed, 0 failed' \
        )), \
        arrayNew('markdownPrint', arrayNew( \
            '', \
            '## Passing Tests' \
        )), \
        arrayNew('markdownPrint', arrayNew( \
            '', \
            "[testUnittest\\_testPassAsync](#var.vTest='testUnittest_testPassAsync') - OK" \
        )) \
    ))
endfunction
unittestRunTestAsync('testUnittestRunTestAsync')


async function testUnittestRunTestAsync_failure():
    # Setup mocks
    unittestMockAll()

    # Run unit tests and report
    mockBegin = testUnittestMockBegin()
    unittestRunTestAsync('testUnittest_testPassAsync')
    unittestRunTestAsync('testUnittest_testFailAsync')
    result = unittestReport()
    testUnittestMockEnd(mockBegin)

    # Verify report result
    unittestEqual(result, 1)

    # Reset mocks
    unittestDeepEqual(unittestMockEnd(), arrayNew( \
        arrayNew('markdownPrint', arrayNew( \
            '', \
            'Ran 2 tests - 1 passed, 1 failed' \
        )), \
        arrayNew('markdownPrint', arrayNew( \
            '', \
            '## Failing Tests' \
        )), \
        arrayNew('markdownPrint', arrayNew( \
            arrayNew( \
                '', \
                "[testUnittest\\_testFailAsync](#var.vTest='testUnittest_testFailAsync') - FAIL", \
                '', \
                '- Equal:', \
                '', \
                '  ```', \
                '  2', \
                '  ```', \
                '', \
                '  ```', \
                '  3', \
                '  ```', \
                '', \
                '- Deep-equal:', \
                '', \
                '  ```', \
                '  ---     2', \
                '  +++     2,', \
                '  +++     3', \
                '  ```', \
                '', \
                '- Deep-equal:', \
                '', \
                '  ```', \
                '  --- 3', \
                '  ```' \
            ) \
        )), \
        arrayNew('markdownPrint', arrayNew( \
            '', \
            '## Passing Tests' \
        )), \
        arrayNew('markdownPrint', arrayNew( \
            '', \
            "[testUnittest\\_testPassAsync](#var.vTest='testUnittest_testPassAsync') - OK" \
        )) \
    ))

endfunction
unittestRunTestAsync('testUnittestRunTestAsync_failure')


async function testUnittestRunTestAsync_multiple():
    # Setup mocks
    unittestMockAll()

    # Run unit tests and report
    mockBegin = testUnittestMockBegin()
    unittestRunTestAsync('testUnittest_testPassAsync')
    unittestRunTestAsync('testUnittest_testPassAsync')
    result = unittestReport()
    testUnittestMockEnd(mockBegin)

    # Verify report result
    unittestEqual(result, 1)

    # Reset mocks
    unittestDeepEqual(unittestMockEnd(), arrayNew( \
        arrayNew('markdownPrint', arrayNew( \
            '', \
            'Ran 1 tests - 1 passed, 0 failed' \
        )), \
        arrayNew('markdownPrint', arrayNew( \
            '', \
            '## Warnings' \
        )), \
        arrayNew('markdownPrint', arrayNew( \
            '', \
            '- Test \\"testUnittest\\_testPassAsync\\" run multiple times' \
        )), \
        arrayNew('markdownPrint', arrayNew( \
            '', \
            '## Passing Tests' \
        )), \
        arrayNew('markdownPrint', arrayNew( \
            '', \
            "[testUnittest\\_testPassAsync](#var.vTest='testUnittest_testPassAsync') - OK" \
        )) \
    ))
endfunction
unittestRunTestAsync('testUnittestRunTestAsync_multiple')


async function testUnittestRunTestAsync_unknown():
    # Setup mocks
    unittestMockAll()

    # Run unit tests and report
    mockBegin = testUnittestMockBegin()
    unittestRunTest('testUnittest_testUnknownAsync')
    result = unittestReport()
    testUnittestMockEnd(mockBegin)

    # Verify report result
    unittestEqual(result, 1)

    # Reset mocks
    unittestDeepEqual(unittestMockEnd(), arrayNew( \
        arrayNew('markdownPrint', arrayNew( \
            '', \
            'Ran 0 tests - 0 passed, 0 failed' \
        )), \
        arrayNew('markdownPrint', arrayNew( \
            '', \
            '## Warnings' \
        )), \
        arrayNew('markdownPrint', arrayNew( \
            '', \
            '- Test \\"testUnittest\\_testUnknownAsync\\" not found' \
        )) \
    ))
endfunction
unittestRunTestAsync('testUnittestRunTestAsync_unknown')
