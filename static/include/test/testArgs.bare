# Licensed under the MIT License
# https://github.com/craigahobbs/markdown-up/blob/main/LICENSE


# Test arguments array
testArgsArguments = arrayNew( \
    objectNew('name', 'print', 'type', 'bool', 'explicit', true), \
    objectNew('name', 'begin', 'type', 'date'), \
    objectNew('name', 'end', 'type', 'datetime'), \
    objectNew('name', 'count', 'type', 'int', 'default', 3), \
    objectNew('name', 'number', 'type', 'float'), \
    objectNew('name', 'name', 'type', 'string', 'description', 'The name'), \
    objectNew('name', 'url', 'global', 'vURL') \
)


async function testArgsSentinel():
    unittestEqual(systemGlobalGet('argsSentinel'), true)
    systemGlobalSet('argsSentinel', 1)
    include '../args.bare'
    unittestEqual(systemGlobalGet('argsSentinel'), 1)
endfunction
unittestRunTest('testArgsSentinel')


function testArgsValidate():
    unittestMockAll()
    unittestDeepEqual(argsValidate(testArgsArguments), testArgsArguments)
    unittestDeepEqual(unittestMockEnd(), arrayNew())
endfunction
unittestRunTest('testArgsValidate')


function testArgsValidateInvalid():
    systemLogDebug('NOTICE: The following "schemaValidate" error is expected:')
    unittestMockAll()
    unittestEqual(argsValidate(arrayNew()), null)
    unittestDeepEqual(unittestMockEnd(), arrayNew())
endfunction
unittestRunTest('testArgsValidateInvalid')


function testArgsValidateDuplicate():
    arguments = arrayNew( \
        objectNew('name', 'name', 'type', 'string', 'description', 'The name'), \
        objectNew('name', 'url', 'global', 'vURL'), \
        objectNew('name', 'name', 'type', 'string') \
    )
    unittestMockAll()
    unittestEqual(argsValidate(arguments), null)
    unittestDeepEqual(unittestMockEnd(), arrayNew( \
        arrayNew('systemLogDebug', arrayNew('args.bare: Duplicate argument "name"')) \
    ))
endfunction
unittestRunTest('testArgsValidateDuplicate')


function testArgsParse():
    unittestMockAll()
    unittestDeepEqual( \
        argsParse(testArgsArguments), \
        objectNew('count', 3) \
    )
    unittestDeepEqual(unittestMockEnd(), arrayNew())
endfunction
unittestRunTest('testArgsParse')


function testArgsParseSome():
    # Set argument globals
    systemGlobalSet('vName', 'test')
    systemGlobalSet('vURL', 'test.json')

    unittestMockAll()
    unittestDeepEqual( \
        argsParse(testArgsArguments), \
        objectNew( \
            'count', 3, \
            'name', 'test', \
            'url', 'test.json' \
        ) \
    )
    unittestDeepEqual(unittestMockEnd(), arrayNew())

    # Clear argument globals
    systemGlobalSet('vName', null)
    systemGlobalSet('vURL', null)
endfunction
unittestRunTest('testArgsParseSome')


function testArgsParseAll():
    # Set argument globals
    systemGlobalSet('vPrint', 1)
    systemGlobalSet('vBegin', '2023-10-01')
    systemGlobalSet('vEnd', '2023-11-01T12:00:00Z')
    systemGlobalSet('vCount', 5)
    systemGlobalSet('vNumber', 3.14)
    systemGlobalSet('vName', 'test')
    systemGlobalSet('vURL', 'test.json')

    unittestMockAll()
    unittestDeepEqual( \
        argsParse(testArgsArguments), \
        objectNew( \
            'print', true, \
            'begin', datetimeNew(2023, 10, 1), \
            'end', datetimeISOParse(vEnd), \
            'count', 5, \
            'number', 3.14, \
            'name', 'test', \
            'url', 'test.json' \
        ) \
    )
    unittestDeepEqual(unittestMockEnd(), arrayNew())

    # Clear argument globals
    systemGlobalSet('vPrint', null)
    systemGlobalSet('vBegin', null)
    systemGlobalSet('vEnd', null)
    systemGlobalSet('vCount', null)
    systemGlobalSet('vNumber', null)
    systemGlobalSet('vName', null)
    systemGlobalSet('vURL', null)
endfunction
unittestRunTest('testArgsParseAll')


function testArgsParseInvalid():
    # Set argument globals
    systemGlobalSet('vPrint', 'invalid1')
    systemGlobalSet('vBegin', 'invalid2')
    systemGlobalSet('vEnd', 'invalid3')
    systemGlobalSet('vCount', 'invalid4')
    systemGlobalSet('vNumber', 'invalid5')
    systemGlobalSet('vName', 6)
    systemGlobalSet('vURL', 7)

    unittestMockAll()
    unittestDeepEqual( \
        argsParse(testArgsArguments), \
        objectNew('count', 3) \
    )
    unittestDeepEqual(unittestMockEnd(), arrayNew( \
        arrayNew('systemLogDebug', arrayNew('args.bare: Invalid value "invalid1" for URL argument "vPrint"')), \
        arrayNew('systemLogDebug', arrayNew('args.bare: Invalid value "invalid2" for URL argument "vBegin"')), \
        arrayNew('systemLogDebug', arrayNew('args.bare: Invalid value "invalid3" for URL argument "vEnd"')), \
        arrayNew('systemLogDebug', arrayNew('args.bare: Invalid value "invalid4" for URL argument "vCount"')), \
        arrayNew('systemLogDebug', arrayNew('args.bare: Invalid value "invalid5" for URL argument "vNumber"')), \
        arrayNew('systemLogDebug', arrayNew('args.bare: Invalid value 6 for URL argument "vName"')), \
        arrayNew('systemLogDebug', arrayNew('args.bare: Invalid value 7 for URL argument "vURL"')) \
    ))

    # Clear argument globals
    systemGlobalSet('vPrint', null)
    systemGlobalSet('vBegin', null)
    systemGlobalSet('vEnd', null)
    systemGlobalSet('vCount', null)
    systemGlobalSet('vNumber', null)
    systemGlobalSet('vName', null)
    systemGlobalSet('vURL', null)
endfunction
unittestRunTest('testArgsParseInvalid')


function testArgsParseInvalidBool():
    # Set argument globals
    systemGlobalSet('vPrint', 2)

    unittestMockAll()
    unittestDeepEqual( \
        argsParse(testArgsArguments), \
        objectNew('count', 3) \
    )
    unittestDeepEqual(unittestMockEnd(), arrayNew( \
        arrayNew('systemLogDebug', arrayNew('args.bare: Invalid value 2 for URL argument "vPrint"')) \
    ))

    # Clear argument globals
    systemGlobalSet('vPrint', null)
endfunction
unittestRunTest('testArgsParseInvalidBool')


function testArgsParseInvalidDate():
    # Set argument globals
    systemGlobalSet('vBegin', 1)

    unittestMockAll()
    unittestDeepEqual( \
        argsParse(testArgsArguments), \
        objectNew('count', 3) \
    )
    unittestDeepEqual(unittestMockEnd(), arrayNew( \
        arrayNew('systemLogDebug', arrayNew('args.bare: Invalid value 1 for URL argument "vBegin"')) \
    ))

    # Clear argument globals
    systemGlobalSet('vBegin', null)
endfunction
unittestRunTest('testArgsParseInvalidDate')


function testArgsParseInvalidDate2():
    # Set argument globals
    systemGlobalSet('vBegin', '2023-11-01T00:00:15Z')

    unittestMockAll()
    unittestDeepEqual( \
        argsParse(testArgsArguments), \
        objectNew('count', 3) \
    )
    unittestDeepEqual(unittestMockEnd(), arrayNew( \
        arrayNew('systemLogDebug', arrayNew('args.bare: Invalid value "2023-11-01T00:00:15Z" for URL argument "vBegin"')) \
    ))

    # Clear argument globals
    systemGlobalSet('vBegin', null)
endfunction
unittestRunTest('testArgsParseInvalidDate2')


function testArgsParseInvalidDatetime():
    # Set argument globals
    systemGlobalSet('vEnd', 1)

    unittestMockAll()
    unittestDeepEqual( \
        argsParse(testArgsArguments), \
        objectNew('count', 3) \
    )
    unittestDeepEqual(unittestMockEnd(), arrayNew( \
        arrayNew('systemLogDebug', arrayNew('args.bare: Invalid value 1 for URL argument "vEnd"')) \
    ))

    # Clear argument globals
    systemGlobalSet('vEnd', null)
endfunction
unittestRunTest('testArgsParseInvalidDatetime')


function testArgsParseInvalidInt():
    # Set argument globals
    systemGlobalSet('vCount', 5.5)

    unittestMockAll()
    unittestDeepEqual( \
        argsParse(testArgsArguments), \
        objectNew('count', 3) \
    )
    unittestDeepEqual(unittestMockEnd(), arrayNew( \
        arrayNew('systemLogDebug', arrayNew('args.bare: Invalid value 5.5 for URL argument "vCount"')) \
    ))

    # Clear argument globals
    systemGlobalSet('vCount', null)
endfunction
unittestRunTest('testArgsParseInvalidInt')


function testArgsURL():
    unittestMockAll()
    unittestEqual( \
        argsURL(testArgsArguments, objectNew()), \
        '#var=' \
    )
    unittestDeepEqual(unittestMockEnd(), arrayNew())
endfunction
unittestRunTest('testArgsURL')


function testArgsURLObjectSome():
    unittestMockAll()
    unittestEqual( \
        argsURL(testArgsArguments, objectNew( \
            'name', 'test', \
            'url', 'test.json' \
        )), \
        "#var.vName='test'&var.vURL='test.json'" \
    )
    unittestDeepEqual(unittestMockEnd(), arrayNew())
endfunction
unittestRunTest('testArgsURLObjectSome')


function testArgsURLObjectAll():
    endDatetime = datetimeNew(2023, 11, 1, 12)
    endURL = urlEncodeComponent(datetimeISOFormat(endDatetime))
    unittestMockAll()
    unittestEqual( \
        argsURL(testArgsArguments, objectNew( \
            'print', 1, \
            'begin', datetimeNew(2023, 10, 1), \
            'end', endDatetime, \
            'count', 5, \
            'number', 3.14, \
            'name', 'test', \
            'url', 'test.json' \
        )), \
        "#var.vBegin='2023-10-01'&var.vCount=5&var.vEnd='" + endURL + "'&var.vName='test'&var.vNumber=3.14&var.vPrint=true&var.vURL='test.json'" \
    )
    unittestDeepEqual(unittestMockEnd(), arrayNew())
endfunction
unittestRunTest('testArgsURLObjectAll')


function testArgsURLObjectUnknown():
    unittestMockAll()
    unittestEqual( \
        argsURL(testArgsArguments, objectNew( \
            'Name', 'test', \
            'url', 'test.json' \
        )), \
        "#var.vURL='test.json'" \
    )
    unittestDeepEqual(unittestMockEnd(), arrayNew( \
        arrayNew('systemLogDebug', arrayNew('args.bare: Unknown argument "Name"')) \
    ))
endfunction
unittestRunTest('testArgsURLObjectUnknown')


function testArgsURLObjectDefault():
    unittestMockAll()
    unittestEqual( \
        argsURL(testArgsArguments, objectNew('count', 3)), \
        '#var=' \
    )
    unittestDeepEqual(unittestMockEnd(), arrayNew())
endfunction
unittestRunTest('testArgsURLObjectDefault')


function testArgsURLObjectDefaultDate():
    arguments = arrayNew( \
        objectNew('name', 'begin', 'type', 'date', 'default', datetimeNew(2023, 11, 7)) \
    )
    unittestMockAll()
    unittestEqual( \
        argsURL(arguments, objectNew('begin', datetimeNew(2023, 11, 7))), \
        '#var=' \
    )
    unittestEqual( \
        argsURL(arguments, objectNew('begin', datetimeNew(2023, 11, 6))), \
        "#var.vBegin='2023-11-06'" \
    )
    unittestDeepEqual(unittestMockEnd(), arrayNew())
endfunction
unittestRunTest('testArgsURLObjectDefaultDate')


function testArgsURLObjectDefaultDatetime():
    endDatetime = datetimeNew(2023, 11, 6, 12)
    endURL = urlEncodeComponent(datetimeISOFormat(endDatetime))
    arguments = arrayNew( \
        objectNew('name', 'end', 'type', 'datetime', 'default', datetimeNew(2023, 11, 7, 12)) \
    )
    unittestMockAll()
    unittestEqual( \
        argsURL(arguments, objectNew('end', datetimeNew(2023, 11, 7, 12))), \
        '#var=' \
    )
    unittestEqual( \
        argsURL(arguments, objectNew('end', endDatetime)), \
        "#var.vEnd='" + endURL + "'" \
    )
    unittestDeepEqual(unittestMockEnd(), arrayNew())
endfunction
unittestRunTest('testArgsURLObjectDefaultDatetime')


function testArgsURLObjectInvalid():
    unittestMockAll()
    unittestEqual( \
        argsURL(testArgsArguments, objectNew( \
            'print', 'invalid1', \
            'begin', 'invalid2', \
            'end', 'invalid3', \
            'count', 'invalid4', \
            'number', 'invalid5', \
            'name', 6, \
            'url', 7 \
        )), \
        '#var=' \
    )
    unittestDeepEqual(unittestMockEnd(), arrayNew( \
        arrayNew('systemLogDebug', arrayNew('args.bare: Invalid value "invalid1" for URL argument "vPrint"')), \
        arrayNew('systemLogDebug', arrayNew('args.bare: Invalid value "invalid2" for URL argument "vBegin"')), \
        arrayNew('systemLogDebug', arrayNew('args.bare: Invalid value "invalid3" for URL argument "vEnd"')), \
        arrayNew('systemLogDebug', arrayNew('args.bare: Invalid value "invalid4" for URL argument "vCount"')), \
        arrayNew('systemLogDebug', arrayNew('args.bare: Invalid value "invalid5" for URL argument "vNumber"')), \
        arrayNew('systemLogDebug', arrayNew('args.bare: Invalid value 6 for URL argument "vName"')), \
        arrayNew('systemLogDebug', arrayNew('args.bare: Invalid value 7 for URL argument "vURL"')) \
    ))
endfunction
unittestRunTest('testArgsURLObjectInvalid')


function testArgsURLObjectInvalidBool():
    unittestMockAll()
    unittestEqual( \
        argsURL(testArgsArguments, objectNew('print', 2)), \
        '#var=' \
    )
    unittestDeepEqual(unittestMockEnd(), arrayNew( \
        arrayNew('systemLogDebug', arrayNew('args.bare: Invalid value 2 for URL argument "vPrint"')) \
    ))
endfunction
unittestRunTest('testArgsURLObjectInvalidBool')


function testArgsURLObjectInvalidDate():
    unittestMockAll()
    unittestEqual( \
        argsURL(testArgsArguments, objectNew('begin', 1)), \
        '#var=' \
    )
    unittestDeepEqual(unittestMockEnd(), arrayNew( \
        arrayNew('systemLogDebug', arrayNew('args.bare: Invalid value 1 for URL argument "vBegin"')) \
    ))
endfunction
unittestRunTest('testArgsURLObjectInvalidDate')


function testArgsURLObjectInvalidDate2():
    beginDatetime = datetimeNew(2023, 11, 1, 0, 0, 15)
    beginStr = datetimeISOFormat(beginDatetime)
    unittestMockAll()
    unittestEqual( \
        argsURL(testArgsArguments, objectNew('begin', beginDatetime)), \
        '#var=' \
    )
    unittestDeepEqual(unittestMockEnd(), arrayNew( \
        arrayNew('systemLogDebug', arrayNew('args.bare: Invalid value "' + beginStr + '" for URL argument "vBegin"')) \
    ))
endfunction
unittestRunTest('testArgsURLObjectInvalidDate2')


function testArgsURLObjectInvalidDatetime():
    unittestMockAll()
    unittestEqual( \
        argsURL(testArgsArguments, objectNew('end', 1)), \
        '#var=' \
    )
    unittestDeepEqual(unittestMockEnd(), arrayNew( \
        arrayNew('systemLogDebug', arrayNew('args.bare: Invalid value 1 for URL argument "vEnd"')) \
    ))
endfunction
unittestRunTest('testArgsURLObjectInvalidDatetime')


function testArgsURLObjectInvalidInt():
    unittestMockAll()
    unittestEqual( \
        argsURL(testArgsArguments, objectNew('count', 5.5)), \
        '#var=' \
    )
    unittestDeepEqual(unittestMockEnd(), arrayNew( \
        arrayNew('systemLogDebug', arrayNew('args.bare: Invalid value 5.5 for URL argument "vCount"')) \
    ))
endfunction
unittestRunTest('testArgsURLObjectInvalidInt')


function testArgsURLGlobalSome():
    # Set argument globals
    systemGlobalSet('vName', 'test')
    systemGlobalSet('vURL', 'test.json')

    unittestMockAll()
    unittestEqual( \
        argsURL(testArgsArguments, objectNew()), \
        "#var.vName='test'&var.vURL='test.json'" \
    )
    unittestDeepEqual(unittestMockEnd(), arrayNew())

    # Clear argument globals
    systemGlobalSet('vName', null)
    systemGlobalSet('vURL', null)
endfunction
unittestRunTest('testArgsURLGlobalSome')


function testArgsURLGlobalAll():
    # Set argument globals
    systemGlobalSet('vPrint', 1)
    systemGlobalSet('vBegin', '2023-10-01')
    systemGlobalSet('vEnd', '2023-11-01T12:00:00Z')
    systemGlobalSet('vCount', 5)
    systemGlobalSet('vNumber', 3.14)
    systemGlobalSet('vName', 'test')
    systemGlobalSet('vURL', 'test.json')

    endURL = urlEncodeComponent(datetimeISOFormat(datetimeISOParse(vEnd)))
    unittestMockAll()
    unittestEqual( \
        argsURL(testArgsArguments, objectNew()), \
        "#var.vBegin='2023-10-01'&var.vCount=5&var.vEnd='" + endURL + "'&var.vName='test'&var.vNumber=3.14&var.vURL='test.json'" \
    )
    unittestDeepEqual(unittestMockEnd(), arrayNew())

    # Clear argument globals
    systemGlobalSet('vPrint', null)
    systemGlobalSet('vBegin', null)
    systemGlobalSet('vEnd', null)
    systemGlobalSet('vCount', null)
    systemGlobalSet('vNumber', null)
    systemGlobalSet('vName', null)
    systemGlobalSet('vURL', null)
endfunction
unittestRunTest('testArgsURLGlobalAll')


function testArgsURLGlobalDefault():
    # Set argument globals
    systemGlobalSet('vCount', 3)

    unittestMockAll()
    unittestEqual( \
        argsURL(testArgsArguments, objectNew()), \
        '#var=' \
    )
    unittestDeepEqual(unittestMockEnd(), arrayNew())

    # Clear argument globals
    systemGlobalSet('vCount', null)
endfunction
unittestRunTest('testArgsURLGlobalDefault')


function testArgsURLGlobalInvalid():
    # Set argument globals
    systemGlobalSet('vPrint', 'invalid1')
    systemGlobalSet('vBegin', 'invalid2')
    systemGlobalSet('vEnd', 'invalid3')
    systemGlobalSet('vCount', 'invalid4')
    systemGlobalSet('vNumber', 'invalid5')
    systemGlobalSet('vName', 6)
    systemGlobalSet('vURL', 7)

    unittestMockAll()
    unittestEqual( \
        argsURL(testArgsArguments, objectNew()), \
        '#var=' \
    )
    unittestDeepEqual(unittestMockEnd(), arrayNew())

    # Clear argument globals
    systemGlobalSet('vPrint', null)
    systemGlobalSet('vBegin', null)
    systemGlobalSet('vEnd', null)
    systemGlobalSet('vCount', null)
    systemGlobalSet('vNumber', null)
    systemGlobalSet('vName', null)
    systemGlobalSet('vURL', null)
endfunction
unittestRunTest('testArgsURLGlobalInvalid')


function testArgsURLGlobalInvalidBool():
    # Set argument globals
    systemGlobalSet('vPrint', 2)

    arguments = arrayNew( \
        objectNew('name', 'print', 'type', 'bool') \
    )
    unittestMockAll()
    unittestEqual( \
        argsURL(arguments, objectNew()), \
        '#var=' \
    )
    unittestDeepEqual(unittestMockEnd(), arrayNew())

    # Clear argument globals
    systemGlobalSet('vPrint', null)
endfunction
unittestRunTest('testArgsURLGlobalInvalidBool')


function testArgsURLGlobalInvalidDate():
    # Set argument globals
    systemGlobalSet('vBegin', 1)

    unittestMockAll()
    unittestEqual( \
        argsURL(testArgsArguments, objectNew()), \
        '#var=' \
    )
    unittestDeepEqual(unittestMockEnd(), arrayNew())

    # Clear argument globals
    systemGlobalSet('vBegin', null)
endfunction
unittestRunTest('testArgsURLGlobalInvalidDate')


function testArgsURLGlobalInvalidDate2():
    # Set argument globals
    systemGlobalSet('vBegin', '2023-11-01T00:00:15Z')

    unittestMockAll()
    unittestEqual( \
        argsURL(testArgsArguments, objectNew()), \
        '#var=' \
    )
    unittestDeepEqual(unittestMockEnd(), arrayNew())

    # Clear argument globals
    systemGlobalSet('vBegin', null)
endfunction
unittestRunTest('testArgsURLGlobalInvalidDate2')


function testArgsURLGlobalInvalidDatetime():
    # Set argument globals
    systemGlobalSet('vEnd', 1)

    unittestMockAll()
    unittestEqual( \
        argsURL(testArgsArguments, objectNew()), \
        '#var=' \
    )
    unittestDeepEqual(unittestMockEnd(), arrayNew())

    # Clear argument globals
    systemGlobalSet('vEnd', null)
endfunction
unittestRunTest('testArgsURLGlobalInvalidDatetime')


function testArgsURLGlobalInvalidInt():
    # Set argument globals
    systemGlobalSet('vCount', 5.5)

    unittestMockAll()
    unittestEqual( \
        argsURL(testArgsArguments, objectNew()), \
        '#var=' \
    )
    unittestDeepEqual(unittestMockEnd(), arrayNew())

    # Clear argument globals
    systemGlobalSet('vCount', null)
endfunction
unittestRunTest('testArgsURLGlobalInvalidInt')


function testArgsURLMixed():
    # Set argument globals
    systemGlobalSet('vURL', 'test.json')

    unittestMockAll()
    unittestEqual( \
        argsURL(testArgsArguments, objectNew( \
            'print', 1, \
            'count', 5 \
        )), \
        "#var.vCount=5&var.vPrint=true&var.vURL='test.json'" \
    )
    unittestDeepEqual(unittestMockEnd(), arrayNew())

    # Clear argument globals
    systemGlobalSet('vURL', null)
endfunction
unittestRunTest('testArgsURLMixed')


function testArgsURLExplicit():
    # Set argument globals
    systemGlobalSet('vURL', 'test.json')

    unittestMockAll()
    unittestEqual( \
        argsURL(testArgsArguments, objectNew('name', 'test'), true), \
        "#var.vName='test'" \
    )
    unittestDeepEqual(unittestMockEnd(), arrayNew())

    # Clear argument globals
    systemGlobalSet('vURL', null)
endfunction
unittestRunTest('testArgsURLExplicit')


function testArgsURLHeaderId():
    # Set argument globals
    systemGlobalSet('vURL', 'test.json')

    unittestMockAll()
    unittestEqual( \
        argsURL(testArgsArguments, objectNew('name', 'test'), false, 'The Subtitle'), \
        "#var.vName='test'&var.vURL='test.json'&the-subtitle" \
    )
    unittestDeepEqual(unittestMockEnd(), arrayNew())

    # Clear argument globals
    systemGlobalSet('vURL', null)
endfunction
unittestRunTest('testArgsURLHeaderId')


function testArgsURLHeaderIdTop():
    # Set argument globals
    systemGlobalSet('vURL', 'test.json')

    unittestMockAll()
    unittestEqual( \
        argsURL(testArgsArguments, objectNew('name', 'test'), false, argsTopHeaderId), \
        "#var.vName='test'&var.vURL='test.json'&_top" \
    )
    unittestDeepEqual(unittestMockEnd(), arrayNew())

    # Clear argument globals
    systemGlobalSet('vURL', null)
endfunction
unittestRunTest('testArgsURLHeaderIdTop')


function testArgsURLMarkdownUpURL():
    # Set argument globals
    systemGlobalSet('vURL', 'test.json')

    unittestMockAll()
    unittestEqual( \
        argsURL(testArgsArguments, objectNew('name', 'test'), false, null, 'my doc.md'), \
        "#url=my%20doc.md&var.vName='test'&var.vURL='test.json'" \
    )
    unittestDeepEqual(unittestMockEnd(), arrayNew())

    # Clear argument globals
    systemGlobalSet('vURL', null)
endfunction
unittestRunTest('testArgsURLMarkdownUpURL')


function testArgsLink():
    # Set argument globals
    systemGlobalSet('vURL', 'test.json')

    unittestMockAll()
    unittestEqual( \
        argsLink(testArgsArguments, 'Link-1', objectNew( \
            'print', 1, \
            'name', 'test 1' \
        )), \
        "[Link\\-1](#var.vName='test%201'&var.vPrint=true&var.vURL='test.json')" \
    )
    unittestDeepEqual(unittestMockEnd(), arrayNew())

    # Clear argument globals
    systemGlobalSet('vURL', null)
endfunction
unittestRunTest('testArgsLink')


function testArgsLinkExplicit():
    # Set argument globals
    systemGlobalSet('vURL', 'test.json')

    unittestMockAll()
    unittestEqual( \
        argsLink(testArgsArguments, 'Link', objectNew('name', 'test'), true), \
        "[Link](#var.vName='test')" \
    )
    unittestDeepEqual(unittestMockEnd(), arrayNew())

    # Clear argument globals
    systemGlobalSet('vURL', null)
endfunction
unittestRunTest('testArgsLinkExplicit')


function testArgsLinkHeaderId():
    # Set argument globals
    systemGlobalSet('vURL', 'test.json')

    unittestMockAll()
    unittestEqual( \
        argsLink(testArgsArguments, 'Link', objectNew('name', 'test'), false, 'The Subtitle'), \
        "[Link](#var.vName='test'&var.vURL='test.json'&the-subtitle)" \
    )
    unittestDeepEqual(unittestMockEnd(), arrayNew())

    # Clear argument globals
    systemGlobalSet('vURL', null)
endfunction
unittestRunTest('testArgsLinkHeaderId')


function testArgsLinkMarkdownUpURL():
    # Set argument globals
    systemGlobalSet('vURL', 'test.json')

    unittestMockAll()
    unittestEqual( \
        argsLink(testArgsArguments, 'Link', objectNew('name', 'test'), false, null, 'my doc.md'), \
        "[Link](#url=my%20doc.md&var.vName='test'&var.vURL='test.json')" \
    )
    unittestDeepEqual(unittestMockEnd(), arrayNew())

    # Clear argument globals
    systemGlobalSet('vURL', null)
endfunction
unittestRunTest('testArgsLinkMarkdownUpURL')


function testArgsLinkMarkdownUpURL_noVars():
    unittestMockAll()
    unittestEqual( \
        argsLink(testArgsArguments, 'Link', null, false, null, 'my doc.md'), \
        "[Link](#url=my%20doc.md&var=)" \
    )
    unittestDeepEqual(unittestMockEnd(), arrayNew())
endfunction
unittestRunTest('testArgsLinkMarkdownUpURL_noVars')


function testArgsHelp():
    unittestMockAll()
    argsHelp(testArgsArguments)
    unittestDeepEqual(unittestMockEnd(), arrayNew( \
        arrayNew('dataTable', arrayNew( \
            arrayNew( \
                objectNew('Default', '',  'Description', '',         'Explicit', 'Yes', 'Type', 'bool',     'Variable', 'vPrint'), \
                objectNew('Default', '',  'Description', '',         'Explicit', '',    'Type', 'date',     'Variable', 'vBegin'), \
                objectNew('Default', '',  'Description', '',         'Explicit', '',    'Type', 'datetime', 'Variable', 'vEnd'), \
                objectNew('Default', '3', 'Description', '',         'Explicit', '',    'Type', 'int',      'Variable', 'vCount'), \
                objectNew('Default', '',  'Description', '',         'Explicit', '',    'Type', 'float',    'Variable', 'vNumber'), \
                objectNew('Default', '',  'Description', 'The name', 'Explicit', '',    'Type', 'string',   'Variable', 'vName'), \
                objectNew('Default', '',  'Description', '',         'Explicit', '',    'Type', 'string',   'Variable', 'vURL') \
            ), \
            objectNew('fields', arrayNew('Variable', 'Type', 'Default', 'Explicit', 'Description')) \
        )) \
    ))
endfunction
unittestRunTest('testArgsHelp')


function testArgsHelpDefault():
    endDefault = datetimeNew(2023, 11, 1, 12)
    endDefaultStr = "'" + stringNew(endDefault) + "'"
    unittestMockAll()
    argsHelp(arrayNew( \
        objectNew('name', 'print', 'type', 'bool', 'default', true), \
        objectNew('name', 'begin', 'type', 'date', 'default', datetimeNew(2023, 11, 1)), \
        objectNew('name', 'end', 'type', 'datetime', 'default', endDefault), \
        objectNew('name', 'count', 'type', 'int', 'default', 3), \
        objectNew('name', 'number', 'type', 'float', 'default', 2.72), \
        objectNew('name', 'name', 'default', 'test'), \
        objectNew('name', 'url', 'global', 'vURL', 'default', 'test.json') \
    ))
    unittestDeepEqual(unittestMockEnd(), arrayNew( \
        arrayNew('dataTable', arrayNew( \
            arrayNew( \
                objectNew('Default', 'true',         'Description', '', 'Explicit', '', 'Type', 'bool',     'Variable', 'vPrint'), \
                objectNew('Default', "'2023-11-01'", 'Description', '', 'Explicit', '', 'Type', 'date',     'Variable', 'vBegin'), \
                objectNew('Default', endDefaultStr,  'Description', '', 'Explicit', '', 'Type', 'datetime', 'Variable', 'vEnd'), \
                objectNew('Default', '3',            'Description', '', 'Explicit', '', 'Type', 'int',      'Variable', 'vCount'), \
                objectNew('Default', '2.72',         'Description', '', 'Explicit', '', 'Type', 'float',    'Variable', 'vNumber'), \
                objectNew('Default', "'test'",       'Description', '', 'Explicit', '', 'Type', 'string',   'Variable', 'vName'), \
                objectNew('Default', "'test.json'",  'Description', '', 'Explicit', '', 'Type', 'string',   'Variable', 'vURL') \
            ), \
            objectNew('fields', arrayNew('Variable', 'Type', 'Default')) \
        )) \
    ))
endfunction
unittestRunTest('testArgsHelpDefault')


function testArgsHelpExplicit():
    unittestMockAll()
    argsHelp(arrayNew( \
        objectNew('name', 'name', 'explicit', true), \
        objectNew('name', 'url', 'global', 'vURL') \
    ))
    unittestDeepEqual(unittestMockEnd(), arrayNew( \
        arrayNew('dataTable', arrayNew( \
            arrayNew( \
                objectNew('Default', '', 'Description', '', 'Explicit', 'Yes', 'Type', 'string', 'Variable', 'vName'), \
                objectNew('Default', '', 'Description', '', 'Explicit', '',    'Type', 'string', 'Variable', 'vURL') \
            ), \
            objectNew('fields', arrayNew('Variable', 'Type', 'Explicit')) \
        )) \
    ))
endfunction
unittestRunTest('testArgsHelpExplicit')


function testArgsHelpDescription():
    unittestMockAll()
    argsHelp(arrayNew( \
        objectNew('name', 'name', 'description', 'The name'), \
        objectNew('name', 'url', 'global', 'vURL') \
    ))
    unittestDeepEqual(unittestMockEnd(), arrayNew( \
        arrayNew('dataTable', arrayNew( \
            arrayNew( \
                objectNew('Default', '', 'Description', 'The name', 'Explicit', '', 'Type', 'string', 'Variable', 'vName'), \
                objectNew('Default', '', 'Description', '',         'Explicit', '', 'Type', 'string', 'Variable', 'vURL') \
            ), \
            objectNew('fields', arrayNew('Variable', 'Type', 'Description')) \
        )) \
    ))
endfunction
unittestRunTest('testArgsHelpDescription')


function testArgsHelpNoExtra():
    unittestMockAll()
    argsHelp(arrayNew( \
        objectNew('name', 'name'), \
        objectNew('name', 'url', 'global', 'vURL') \
    ))
    unittestDeepEqual(unittestMockEnd(), arrayNew( \
        arrayNew('dataTable', arrayNew( \
            arrayNew( \
                objectNew('Default', '', 'Description', '', 'Explicit', '', 'Type', 'string', 'Variable', 'vName'), \
                objectNew('Default', '', 'Description', '', 'Explicit', '', 'Type', 'string', 'Variable', 'vURL') \
            ), \
            objectNew('fields', arrayNew('Variable', 'Type')) \
        )) \
    ))
endfunction
unittestRunTest('testArgsHelpNoExtra')
