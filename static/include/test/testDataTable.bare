# Licensed under the MIT License
# https://github.com/craigahobbs/markdown-up/blob/main/LICENSE


async function testDataTableSentinel():
    unittestEqual(systemGlobalGet('dataTableSentinel'), true)
    systemGlobalSet('dataTableSentinel', 1)
    include '../dataTable.bare'
    unittestEqual(systemGlobalGet('dataTableSentinel'), 1)
endfunction
unittestRunTest('testDataTableSentinel')


function testDataTableMarkdown():
    data = arrayNew(objectNew('A', 1.495, 'B', 2))
    unittestDeepEqual(dataTableMarkdown(data), arrayNew( \
        '| A    | B |', \
        '|------|---|', \
        '| 1.50 | 2 |' \
    ))
endfunction
unittestRunTest('testDataTableMarkdown')


function testDataTableMarkdown_fields():
    data = arrayNew(objectNew('A', 1, 'B', 2, 'C', 3))
    model = objectNew( \
        'fields', arrayNew('C'), \
        'categories', arrayNew('A') \
    )
    unittestDeepEqual(dataTableMarkdown(data, model), arrayNew( \
        '| A | C |', \
        '|---|---|', \
        '| 1 | 3 |' \
    ))
endfunction
unittestRunTest('testDataTableMarkdown_fields')


function testDataTableMarkdown_precision():
    data = arrayNew(objectNew('A', 1.495, 'B', 2))
    model = objectNew( \
        'precision', 1, \
        'trim', false \
    )
    unittestDeepEqual(dataTableMarkdown(data, model), arrayNew( \
        '| A   | B   |', \
        '|-----|-----|', \
        '| 1.5 | 2.0 |' \
    ))
endfunction
unittestRunTest('testDataTableMarkdown_precision')


function testDataTableMarkdown_datetime():
    dt = datetimeNew(2023, 9, 25)
    data = arrayNew(objectNew('A', dt))
    unittestDeepEqual(dataTableMarkdown(data), arrayNew( \
        '| A                         |', \
        '|---------------------------|', \
        '| ' + datetimeISOFormat(dt) + ' |' \
    ))
endfunction
unittestRunTest('testDataTableMarkdown_datetime')


function testDataTableMarkdown_datetime_precision():
    data = arrayNew(objectNew('A', datetimeNew(2023, 9, 25)))
    model = objectNew('datetime', 'day')
    unittestDeepEqual(dataTableMarkdown(data, model), arrayNew( \
        '| A          |', \
        '|------------|', \
        '| 2023-09-25 |' \
    ))
endfunction
unittestRunTest('testDataTableMarkdown_datetime_precision')


function testDataTableMarkdown_null():
    data = arrayNew(objectNew('A', null))
    unittestDeepEqual(dataTableMarkdown(data), arrayNew( \
        '| A    |', \
        '|------|', \
        '| null |' \
    ))
endfunction
unittestRunTest('testDataTableMarkdown_null')


function testDataTableMarkdown_formats():
    data = arrayNew( \
        objectNew('A', 'asdf', 'B', 'asdf', 'CCCCCCCCCC', 'asdf'), \
        objectNew('A', 'asdfasdf', 'B', 'asdfasdf', 'CCCCCCCCCC', 'asdfasdf'), \
        objectNew('A', 'asdfa', 'B', 'asdfas', 'CCCCCCCCCC', 'asdfas') \
    )
    model = objectNew( \
        'formats', objectNew( \
            'A', objectNew('align', 'center'), \
            'B', objectNew('align', 'right', 'header', 'BB'), \
            'CCCCCCCCCC', objectNew('align', 'right') \
        ) \
    )
    unittestDeepEqual(dataTableMarkdown(data, model), arrayNew( \
        "|    A     |       BB | CCCCCCCCCC |", \
        "|:--------:|---------:|-----------:|", \
        "|   asdf   |     asdf |       asdf |", \
        "| asdfasdf | asdfasdf |   asdfasdf |", \
        "|  asdfa   |   asdfas |     asdfas |" \
    ))
endfunction
unittestRunTest('testDataTableMarkdown_formats')


function testDataTableMarkdown_invalidData():
    data = arrayNew( \
        objectNew('A', 1), \
        objectNew('A', 'asdfasdf') \
    )
    systemLogDebug('NOTICE: The following "dataValidate" error is expected:')
    unittestDeepEqual(dataTableMarkdown(data), null)
endfunction
unittestRunTest('testDataTableMarkdown_invalidData')


function testDataTableMarkdown_invalidModel():
    data = arrayNew( \
        objectNew('A', 1) \
    )
    invalidModel = 'INVALID'
    systemLogDebug('NOTICE: The following "schemaValidate" error is expected:')
    unittestDeepEqual(dataTableMarkdown(data, invalidModel), null)
endfunction
unittestRunTest('testDataTableMarkdown_invalidModel')


function testDataTableMarkdown_noFields():
    data = arrayNew()
    unittestDeepEqual(dataTableMarkdown(data), null)
endfunction
unittestRunTest('testDataTableMarkdown_noFields')
