# Licensed under the MIT License
# https://github.com/craigahobbs/markdown-up/blob/main/LICENSE


# Test page function
function testPagerModel_page2():
    markdownPrint('This is page 2')
endfunction


# Test page function #2
function testPagerModel_page4():
    markdownPrint('This is page 4')
endfunction


# Test pager model
testPagerModel = objectNew( \
    'pages', arrayNew( \
        objectNew('name', 'Page 1', 'type', objectNew('markdown', objectNew( \
            'url', 'README.md'))), \
        objectNew('name', 'Page2', 'type', objectNew('function', objectNew( \
            'function', testPagerModel_page2, 'title', 'Page 2'))), \
        objectNew('name', 'Page3', 'type', objectNew('link', objectNew( \
            'url', '#url=other.md'))), \
        objectNew('name', 'Page4', 'hidden', true, 'type', objectNew('function', objectNew( \
            'function', testPagerModel_page4))) \
    ) \
)


async function testPagerSentinel():
    unittestEqual(systemGlobalGet('pagerSentinel'), true)
    systemGlobalSet('pagerSentinel', 1)
    include '../pager.bare'
    unittestEqual(systemGlobalGet('pagerSentinel'), 1)
endfunction
unittestRunTest('testPagerSentinel')


async function testPagerMarkdown():
    unittestMockAll(objectNew( \
        'markdownParse', arrayNew(objectNew('parts', arrayNew())), \
        'markdownTitle', arrayNew('The Title'), \
        'systemFetch', objectNew( \
            'README.md', 'Hello!' \
        ) \
    ))

    pagerMain(testPagerModel)

    unittestDeepEqual( \
        unittestMockEnd(), \
        arrayNew( \
            arrayNew('markdownPrint', arrayNew("Page 1&nbsp;|&nbsp;[Page2](#var.vPage='Page2')&nbsp;|&nbsp;[Page3](#url=other.md)", '')), \
            arrayNew('markdownPrint', arrayNew("(&nbsp;Start&nbsp;|&nbsp;Previous&nbsp;|&nbsp;[Next](#var.vPage='Page2')&nbsp;)", '')), \
            arrayNew('systemFetch', arrayNew('README.md')), \
            arrayNew('markdownParse', arrayNew('Hello!')), \
            arrayNew('markdownTitle', arrayNew(objectNew('parts', arrayNew()))), \
            arrayNew('documentSetTitle', arrayNew('The Title')), \
            arrayNew('markdownPrint', arrayNew('', 'Hello!')) \
        ) \
    )
endfunction
unittestRunTest('testPagerMarkdown')


async function testPagerMarkdown_noTitle():
    unittestMockAll(objectNew( \
        'markdownParse', arrayNew(objectNew('parts', arrayNew())), \
        'markdownTitle', arrayNew(null), \
        'systemFetch', objectNew( \
            'README.md', 'Hello!' \
        ) \
    ))

    pagerMain(testPagerModel)

    unittestDeepEqual( \
        unittestMockEnd(), \
        arrayNew( \
            arrayNew('markdownPrint', arrayNew("Page 1&nbsp;|&nbsp;[Page2](#var.vPage='Page2')&nbsp;|&nbsp;[Page3](#url=other.md)", '')), \
            arrayNew('markdownPrint', arrayNew("(&nbsp;Start&nbsp;|&nbsp;Previous&nbsp;|&nbsp;[Next](#var.vPage='Page2')&nbsp;)", '')), \
            arrayNew('systemFetch', arrayNew('README.md')), \
            arrayNew('markdownParse', arrayNew('Hello!')), \
            arrayNew('markdownTitle', arrayNew(objectNew('parts', arrayNew()))), \
            arrayNew('documentSetTitle', arrayNew('No Title')), \
            arrayNew('markdownPrint', arrayNew('', 'Hello!')) \
        ) \
    )
endfunction
unittestRunTest('testPagerMarkdown_noTitle')


async function testPagerMarkdownNotFound():
    unittestMockAll()

    pagerMain(testPagerModel)

    unittestDeepEqual( \
        unittestMockEnd(), \
        arrayNew( \
            arrayNew('markdownPrint', arrayNew("Page 1&nbsp;|&nbsp;[Page2](#var.vPage='Page2')&nbsp;|&nbsp;[Page3](#url=other.md)", '')), \
            arrayNew('markdownPrint', arrayNew("(&nbsp;Start&nbsp;|&nbsp;Previous&nbsp;|&nbsp;[Next](#var.vPage='Page2')&nbsp;)", '')), \
            arrayNew('systemFetch', arrayNew('README.md')), \
            arrayNew('markdownPrint', arrayNew('**Error:** Failed to load "README.md"')) \
        ) \
    )
endfunction
unittestRunTest('testPagerMarkdownNotFound')


async function testPagerFunction():
    unittestMockAll()

    pagerMain(testPagerModel, objectNew('start', 'Page2'))

    unittestDeepEqual( \
        unittestMockEnd(), \
        arrayNew( \
            arrayNew('markdownPrint', arrayNew( \
                "[Page 1](#var.vPage='Page%201')&nbsp;|&nbsp;Page2&nbsp;|&nbsp;[Page3](#url=other.md)", \
                '' \
            )), \
            arrayNew('markdownPrint', arrayNew( \
                "(&nbsp;Start&nbsp;|&nbsp;[Previous](#var.vPage='Page%201')&nbsp;|&nbsp;Next&nbsp;)", \
                '' \
            )), \
            arrayNew('documentSetTitle', arrayNew('Page 2')), \
            arrayNew('markdownPrint', arrayNew('# Page 2', '')), \
            arrayNew('markdownPrint', arrayNew('This is page 2')) \
        ) \
    )
endfunction
unittestRunTest('testPagerFunction')


async function testPagerLink():
    unittestMockAll()

    pagerMain(testPagerModel, objectNew('start', 'Page3'))

    unittestDeepEqual( \
        unittestMockEnd(), \
        arrayNew( \
            arrayNew('markdownPrint', arrayNew( \
                "[Page 1](#var.vPage='Page%201')&nbsp;|&nbsp;[Page2](#var.vPage='Page2')&nbsp;|&nbsp;[Page3](#url=other.md)", \
                '' \
            )), \
            arrayNew('markdownPrint', arrayNew( \
                "(&nbsp;Start&nbsp;|&nbsp;[Previous](#var.vPage='Page2')&nbsp;|&nbsp;Next&nbsp;)", \
                '' \
            )) \
        ) \
    )
endfunction
unittestRunTest('testPagerLink')


async function testPagerHidden():
    unittestMockAll()

    pagerMain(testPagerModel, objectNew('start', 'Page4'))

    unittestDeepEqual( \
        unittestMockEnd(), \
        arrayNew( \
            arrayNew('markdownPrint', arrayNew( \
                "[Page 1](#var.vPage='Page%201')&nbsp;|&nbsp;[Page2](#var.vPage='Page2')&nbsp;|&nbsp;[Page3](#url=other.md)", \
                '' \
            )), \
            arrayNew('markdownPrint', arrayNew( \
                "(&nbsp;Start&nbsp;|&nbsp;[Previous](#var.vPage='Page2')&nbsp;|&nbsp;Next&nbsp;)", \
                '' \
            )), \
            arrayNew('markdownPrint', arrayNew('This is page 4')) \
        ) \
    )
endfunction
unittestRunTest('testPagerHidden')


async function testPagerArg():
    unittestMockAll()

    # Set argument globals
    systemGlobalSet('vPage', 'Page2')

    pagerMain(testPagerModel)

    unittestDeepEqual( \
        unittestMockEnd(), \
        arrayNew( \
            arrayNew('markdownPrint', arrayNew('[Page 1](#var=)&nbsp;|&nbsp;Page2&nbsp;|&nbsp;[Page3](#url=other.md)', '')), \
            arrayNew('markdownPrint', arrayNew('(&nbsp;[Start](#var=)&nbsp;|&nbsp;[Previous](#var=)&nbsp;|&nbsp;Next&nbsp;)', '')), \
            arrayNew('documentSetTitle', arrayNew('Page 2')), \
            arrayNew('markdownPrint', arrayNew('# Page 2', '')), \
            arrayNew('markdownPrint', arrayNew('This is page 2')) \
        ) \
    )

    # Clear argument globals
    systemGlobalSet('vPage', null)
endfunction
unittestRunTest('testPagerArg')


async function testPagerArgUnknown():
    unittestMockAll()

    # Set argument globals
    systemGlobalSet('vPage', 'Unknown')

    pagerMain(testPagerModel, objectNew('start', 'Page2'))

    unittestDeepEqual( \
        unittestMockEnd(), \
        arrayNew( \
            arrayNew('markdownPrint', arrayNew( \
                "[Page 1](#var.vPage='Page%201')&nbsp;|&nbsp;Page2&nbsp;|&nbsp;[Page3](#url=other.md)", \
                '' \
            )), \
            arrayNew('markdownPrint', arrayNew( \
                "(&nbsp;Start&nbsp;|&nbsp;[Previous](#var.vPage='Page%201')&nbsp;|&nbsp;Next&nbsp;)", \
                '' \
            )), \
            arrayNew('documentSetTitle', arrayNew('Page 2')), \
            arrayNew('markdownPrint', arrayNew('# Page 2', '')), \
            arrayNew('markdownPrint', arrayNew('This is page 2')) \
        ) \
    )

    # Clear argument globals
    systemGlobalSet('vPage', null)
endfunction
unittestRunTest('testPagerArgUnknown')


async function testPagerArguments():
    unittestMockAll()

    # Set argument globals
    systemGlobalSet('vPage', 'Page2')
    systemGlobalSet('vName', 'testName')

    arguments = argsValidate(arrayNew( \
        objectNew('name', 'page', 'default', 'Page 1'), \
        objectNew('name', 'name') \
    ))
    pagerMain(testPagerModel, objectNew('arguments', arguments))

    unittestDeepEqual( \
        unittestMockEnd(), \
        arrayNew( \
            arrayNew('markdownPrint', arrayNew( \
                "[Page 1](#var.vName='testName')&nbsp;|&nbsp;Page2&nbsp;|&nbsp;[Page3](#url=other.md)", \
                '' \
            )), \
            arrayNew('markdownPrint', arrayNew( \
                "(&nbsp;[Start](#var.vName='testName')&nbsp;|&nbsp;[Previous](#var.vName='testName')&nbsp;|&nbsp;Next&nbsp;)", \
                '' \
            )), \
            arrayNew('documentSetTitle', arrayNew('Page 2')), \
            arrayNew('markdownPrint', arrayNew('# Page 2', '')), \
            arrayNew('markdownPrint', arrayNew('This is page 2')) \
        ) \
    )

    # Clear argument globals
    systemGlobalSet('vPage', null)
    systemGlobalSet('vName', null)
endfunction
unittestRunTest('testPagerArguments')


async function testPagerHideMenu():
    unittestMockAll()

    pagerMain(testPagerModel, objectNew('start', 'Page2', 'hideMenu', true))

    unittestDeepEqual( \
        unittestMockEnd(), \
        arrayNew( \
            arrayNew('markdownPrint', arrayNew( \
                "(&nbsp;Start&nbsp;|&nbsp;[Previous](#var.vPage='Page%201')&nbsp;|&nbsp;Next&nbsp;)", \
                '' \
            )), \
            arrayNew('documentSetTitle', arrayNew('Page 2')), \
            arrayNew('markdownPrint', arrayNew('# Page 2', '')), \
            arrayNew('markdownPrint', arrayNew('This is page 2')) \
        ) \
    )
endfunction
unittestRunTest('testPagerHideMenu')


async function testPagerHideNav():
    unittestMockAll()

    pagerMain(testPagerModel, objectNew('start', 'Page2', 'hideNav', true))

    unittestDeepEqual( \
        unittestMockEnd(), \
        arrayNew( \
            arrayNew('markdownPrint', arrayNew( \
                "[Page 1](#var.vPage='Page%201')&nbsp;|&nbsp;Page2&nbsp;|&nbsp;[Page3](#url=other.md)", \
                '' \
            )), \
            arrayNew('documentSetTitle', arrayNew('Page 2')), \
            arrayNew('markdownPrint', arrayNew('# Page 2', '')), \
            arrayNew('markdownPrint', arrayNew('This is page 2')) \
        ) \
    )
endfunction
unittestRunTest('testPagerHideNav')


async function testPagerKeyboard():
    unittestMockAll(objectNew( \
        'markdownParse', arrayNew(objectNew('parts', arrayNew())), \
        'markdownTitle', arrayNew('The Title'), \
        'systemFetch', objectNew( \
            'README.md', 'Hello!' \
        ) \
    ))

    pagerMain(testPagerModel, objectNew('hideNav', true, 'keyboard', true))

    mockCalls = unittestMockEnd()
    unittestDeepEqual( \
        mockCalls, \
        arrayNew( \
            arrayNew('markdownPrint', arrayNew("Page 1&nbsp;|&nbsp;[Page2](#var.vPage='Page2')&nbsp;|&nbsp;[Page3](#url=other.md)", '')), \
            arrayNew('systemFetch', arrayNew('README.md')), \
            arrayNew('markdownParse', arrayNew('Hello!')), \
            arrayNew('markdownTitle', arrayNew(objectNew('parts', arrayNew()))), \
            arrayNew('documentSetTitle', arrayNew('The Title')), \
            arrayNew('markdownPrint', arrayNew('', 'Hello!')), \
            arrayNew('documentSetKeyDown', arrayNew('<function>')) \
        ) \
    )
    keyDown = arrayGet(arrayGet(arrayGet(mockCalls, arrayLength(mockCalls) - 1), 1), 0)

    unittestMockAll()
    keyDown(objectNew('key', 'p'))
    unittestDeepEqual(unittestMockEnd(), arrayNew())

    unittestMockAll()
    keyDown(objectNew('key', 'n'))
    unittestDeepEqual(unittestMockEnd(), arrayNew( \
        arrayNew('windowSetLocation', arrayNew("#var.vPage='Page2'")) \
    ))

    unittestMockAll()
    keyDown(objectNew('key', 's'))
    unittestDeepEqual(unittestMockEnd(), arrayNew())

    unittestMockAll()
    keyDown(objectNew('key', 'e'))
    unittestDeepEqual(unittestMockEnd(), arrayNew( \
        arrayNew('windowSetLocation', arrayNew("#var.vPage='Page2'")) \
    ))
endfunction
unittestRunTest('testPagerKeyboard')


async function testPagerKeyboardNonStart():
    unittestMockAll(objectNew( \
        'markdownParse', arrayNew(objectNew('parts', arrayNew())), \
        'markdownTitle', arrayNew('The Title'), \
        'systemFetch', objectNew( \
            'README.md', 'Hello!' \
        ) \
    ))

    # Set argument globals
    systemGlobalSet('vPage', 'Page2')

    pagerMain(testPagerModel, objectNew('hideNav', true, 'keyboard', true))

    # Clear argument globals
    systemGlobalSet('vPage', null)

    mockCalls = unittestMockEnd()
    unittestDeepEqual( \
        mockCalls, \
        arrayNew( \
            arrayNew('markdownPrint', arrayNew("[Page 1](#var=)&nbsp;|&nbsp;Page2&nbsp;|&nbsp;[Page3](#url=other.md)", '')), \
            arrayNew('documentSetTitle', arrayNew('Page 2')), \
            arrayNew('markdownPrint', arrayNew('# Page 2', '')), \
            arrayNew('markdownPrint', arrayNew('This is page 2')), \
            arrayNew('documentSetKeyDown', arrayNew('<function>')) \
        ) \
    )
    keyDown = arrayGet(arrayGet(arrayGet(mockCalls, arrayLength(mockCalls) - 1), 1), 0)

    unittestMockAll()
    keyDown(objectNew('key', 'p'))
    unittestDeepEqual(unittestMockEnd(), arrayNew( \
        arrayNew('windowSetLocation', arrayNew('#var=')) \
    ))

    unittestMockAll()
    keyDown(objectNew('key', 'n'))
    unittestDeepEqual(unittestMockEnd(), arrayNew())

    unittestMockAll()
    keyDown(objectNew('key', 's'))
    unittestDeepEqual(unittestMockEnd(), arrayNew( \
        arrayNew('windowSetLocation', arrayNew('#var=')) \
    ))

    unittestMockAll()
    keyDown(objectNew('key', 'e'))
    unittestDeepEqual(unittestMockEnd(), arrayNew())
endfunction
unittestRunTest('testPagerKeyboardNonStart')


async function testPagerSinglePage():
    unittestMockAll()

    pagerModel = objectNew( \
        'pages', arrayNew( \
            objectNew('name', 'Page2', 'type', objectNew('function', objectNew('function', testPagerModel_page2))) \
        ) \
    )
    pagerMain(pagerModel)

    unittestDeepEqual( \
        unittestMockEnd(), \
        arrayNew( \
            arrayNew('markdownPrint', arrayNew('Page2', '')), \
            arrayNew('markdownPrint', arrayNew('This is page 2')) \
        ) \
    )
endfunction
unittestRunTest('testPagerSinglePage')


async function testPagerNoPages():
    unittestMockAll()

    pagerModel = objectNew( \
        'pages', arrayNew( \
            objectNew('name', 'Link1', 'type', objectNew('link', objectNew('url', 'page1.html'))), \
            objectNew('name', 'Link2', 'type', objectNew('link', objectNew('url', 'page2.html'))) \
        ) \
    )
    pagerMain(pagerModel)

    unittestDeepEqual( \
        unittestMockEnd(), \
        arrayNew( \
            arrayNew('systemLogDebug', arrayNew('pager.bare: No visible and navigable pages')) \
        ) \
    )
endfunction
unittestRunTest('testPagerNoPages')


async function testPagerNoLinks():
    unittestMockAll()

    pagerModel = objectNew( \
        'pages', arrayNew( \
            objectNew('name', 'Page2', 'hidden', true, 'type', objectNew('function', objectNew('function', testPagerModel_page2))), \
            objectNew('name', 'Page4', 'hidden', true, 'type', objectNew('function', objectNew('function', testPagerModel_page4))) \
        ) \
    )
    pagerMain(pagerModel)

    unittestDeepEqual( \
        unittestMockEnd(), \
        arrayNew( \
            arrayNew('systemLogDebug', arrayNew('pager.bare: No visible and navigable pages')) \
        ) \
    )
endfunction
unittestRunTest('testPagerNoLinks')


async function testPagerInvalidPagerModel():
    systemLogDebug('NOTICE: The following "schemaValidate" error is expected:')
    unittestMockAll()

    pagerModel = objectNew( \
        'pages', arrayNew( \
            objectNew('name', 'Page1') \
        ) \
    )
    pagerMain(pagerModel)

    unittestDeepEqual( \
        unittestMockEnd(), \
        arrayNew() \
    )
endfunction
unittestRunTest('testPagerInvalidPagerModel')


async function testPagerInvalidArgumentsModel():
    systemLogDebug('NOTICE: The following "schemaValidate" error is expected:')
    unittestMockAll()

    arguments = arrayNew(objectNew())
    pagerMain(testPagerModel, objectNew('arguments', arguments))

    unittestDeepEqual( \
        unittestMockEnd(), \
        arrayNew() \
    )
endfunction
unittestRunTest('testPagerInvalidArgumentsModel')


async function testPagerInvalidStart():
    unittestMockAll()

    pagerMain(testPagerModel, objectNew('start', 'Unknown'))

    unittestDeepEqual( \
        unittestMockEnd(), \
        arrayNew( \
            arrayNew('systemLogDebug', arrayNew('pager.bare: Unknown start page "Unknown"')) \
        ) \
    )
endfunction
unittestRunTest('testPagerInvalidStart')
